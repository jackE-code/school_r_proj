# Sample cumulative frequency data
age <- c(6.3, 7.2, 9.5, 10.5, 12.0, 12.5, 13.5)
cumulative_frequency <- c(1, 2, 3, 4, 9, 10, 11)
# Plot the ogive curve
plot(age, cumulative_frequency, type = "o", main = "Ogive Curve", xlab = "Age", ylab = "Cumulative Frequency")
# Sample cumulative frequency data
age <- c(6.3, 7.2, 9.5, 10.5, 12.0, 12.5, 13.5)
cumulative_frequency <- c(1, 2, 3, 4, 9, 10, 11)
# Increase the plotting area size
par(mar = c(5, 5, 4, 2) + 0.1)  # Adjust the margins
# Plot the ogive curve
plot(age, cumulative_frequency, type = "o", main = "Ogive Curve", xlab = "Age", ylab = "Cumulative Frequency")
# Sample cumulative frequency data
age <- c(6.3, 7.2, 9.5, 10.5, 12.0, 12.5, 13.5)
cumulative_frequency <- c(1, 2, 3, 4, 9, 10, 11)
# Increase the plotting area size
par(mar = c(7, 7, 5, 3) + 0.1)  # Adjust the margins
# Plot the ogive curve
plot(age, cumulative_frequency, type = "o", main = "Ogive Curve", xlab = "Age", ylab = "Cumulative Frequency")
# Sample cumulative frequency data
age <- c(6.3, 7.2, 9.5, 10.5, 12.0, 12.5, 13.5)
cumulative_frequency <- c(1, 2, 3, 4, 9, 10, 11)
# Increase the plotting area size
par(mar = c(7, 7, 5, 3) + 0.1)  # Adjust the margins
# Plot the ogive curve
plot(age, cumulative_frequency, type = "o", main = "Ogive Curve", xlab = "Age", ylab = "Cumulative Frequency")
library(ggplot2)
# Sample cumulative frequency data
age <- c(6.3, 7.2, 9.5, 10.5, 12.0, 12.5, 13.5)
cumulative_frequency <- c(1, 2, 3, 4, 9, 10, 11)
# Create a data frame
df <- data.frame(age = age, cumulative_frequency = cumulative_frequency)
# Plot the ogive curve using ggplot2
ggplot(df, aes(x = age, y = cumulative_frequency)) +
geom_line() +
geom_point() +
labs(title = "Ogive Curve",
subtitle = "Cumulative Frequency Distribution",
x = "Age",
y = "Cumulative Frequency") +
theme_minimal() +
theme(plot.margin = margin(5, 5, 4, 2))  # Adjust the margins as needed
setwd("C:/Users/SPECTRE/Desktop/School R Proj")
dataset <- read.csv("dataset.csv")
library(knitr)
kable(head(dataset, 10), caption = "Table 1: First 10 Exchange Rates")
inds <- seq(as.Date("2005-01-03"), as.Date("2023-11-23"), by = "day")
inds
range(dataset$Date)
View(inds)
dataset <- read.csv("dataset.csv")
range(dataset$Date)
View(dataset)
range(dataset$Date)
# Convert 'Date' to Date type
dataset$Date <- as.Date(dataset$Date, format="%d/%m/%Y")
range(dataset$Date)
library(knitr)
kable(head(dataset, 10), caption = "Table 1: First 10 Exchange Rates")
inds <- seq(as.Date("2005-01-03"), as.Date("2023-11-23"), by = "day")
## Create a time series object
rate <- dataset[3]
## Create a time series object
rate <- dataset[3]
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[1], "%j"))),
frequency = 365)
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
decomposed.series <- decompose(rate.ts)
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[-1], "%j"))),
frequency = 365)
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
decomposed.series <- decompose(rate.ts)
rate.ts <- ts(rate, start = c(2023, as.numeric(format(inds[1], "%j"))),
frequency = 365)
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
rate.ts <- ts(rate, start = c(2023, as.numeric(format(inds[1], "%j"))),
frequency = 365)
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
rate.ts <- ts(rate, start = c(2005, as.Date(format(inds[1], "%j"))),
frequency = 365)
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[1], "%j"))),
frequency = 365)
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
decomposed.series <- decompose(rate.ts)
decomp.plot <- function(x, main = NULL, ...)
{
if(is.null(main))
main <- paste("Decomposition of", x$type, "time series")
plot(cbind(observed = x$random + if (x$type == "additive")
x$trend + x$seasonal
else x$trend * x$seasonal, trend = x$trend, seasonal = x$seasonal,
random = x$random), main = main, ...)
}
decomp.plot(decomposed.series, col = "blue", main = " Decomposed Series Plot")
library(tseries)
adf.test(rate.ts, alternative = "stationary")
differenced.series <- diff(rate.ts, differences = 1)
decomp.plot(decompose(differenced.series), col = "red", main = " Decomposed Differences Series Plot")
adf.test(differenced.series, alternative = "stationary")
model <- HoltWinters(differenced.series ,beta=FALSE,gamma=FALSE)
plot(model, main =" Holts-Winters Filtering", col = "blue")
library(forecast)
forecasts1 <- forecast:::forecast.HoltWinters(model,h=60)
plot(forecasts1, main = " Forecasts from HoltWinters")
model
# Create a time series object
inds <- seq(as.Date("2005-01-03"), as.Date("2023-11-23"), by = "day")
rate <- dataset$ExchangeRate
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[1], "%j"))), frequency = 365)
# Load necessary libraries
library(knitr)
library(tseries)
library(forecast)
# Read the dataset
dataset <- read.csv("dataset.csv")
# Display the first 10 rows of the dataset
kable(head(dataset, 10), caption = "Table 1: First 10 Exchange Rates")
# Create a time series object
inds <- seq(as.Date("2005-01-03"), as.Date("2023-11-23"), by = "day")
rate <- dataset$ExchangeRate
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[1], "%j"))), frequency = 365)
# Display the first 10 rows of the dataset
kable(head(dataset, 10), caption = "Table 1: First 10 Exchange Rates")
# Create a time series object
inds <- seq(as.Date("2005-01-03"), as.Date("2023-11-23"), by = "day")
rate <- dataset$Mean
rate.ts <- ts(rate, start = c(2005, as.numeric(format(inds[1], "%j"))), frequency = 365)
# Plot time series
plot.ts(rate.ts, main = "Figure 1: Time Plot of Kenyan Shillings - US Dollar Exchange Rate", col = "blue")
# Decompose the time series
decomposed.series <- decompose(rate.ts)
# Plot decomposition
decomp.plot <- function(x, main = NULL, ...) {
if(is.null(main))
main <- paste("Decomposition of", x$type, "time series")
plot(cbind(observed = x$random + if (x$type == "additive") x$trend + x$seasonal else x$trend * x$seasonal,
trend = x$trend, seasonal = x$seasonal, random = x$random), main = main, ...)
}
decomp.plot(decomposed.series, col = "blue", main = " Decomposed Series Plot")
